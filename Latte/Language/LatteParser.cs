//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Latte.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LatteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, COMMENT=38, 
		MULTICOMMENT=39, INT=40, ID=41, WS=42, STR=43;
	public const int
		RULE_program = 0, RULE_topDef = 1, RULE_arg = 2, RULE_block = 3, RULE_stmt = 4, 
		RULE_lhs = 5, RULE_classDecl = 6, RULE_type_ = 7, RULE_item = 8, RULE_expr = 9, 
		RULE_fieldAccess = 10, RULE_addOp = 11, RULE_mulOp = 12, RULE_relOp = 13;
	public static readonly string[] ruleNames = {
		"program", "topDef", "arg", "block", "stmt", "lhs", "classDecl", "type_", 
		"item", "expr", "fieldAccess", "addOp", "mulOp", "relOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'class'", "'{'", "'}'", "','", "';'", "'='", "'++'", 
		"'--'", "'return'", "'if'", "'else'", "'while'", "'.'", "'int'", "'string'", 
		"'boolean'", "'void'", "'-'", "'!'", "'&&'", "'||'", "'true'", "'false'", 
		"'new'", "') null'", "'+'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "COMMENT", "MULTICOMMENT", "INT", "ID", "WS", "STR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Latte.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LatteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LatteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LatteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopDefContext[] topDef() {
			return GetRuleContexts<TopDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopDefContext topDef(int i) {
			return GetRuleContext<TopDefContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 28;
				topDef();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 2199024238600L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopDefContext : ParserRuleContext {
		public TopDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topDef; } }
	 
		public TopDefContext() { }
		public virtual void CopyFrom(TopDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TopDefClassContext : TopDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public TopDefClassContext(TopDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterTopDefClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitTopDefClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopDefClass(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TopDefFunctionContext : TopDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public TopDefFunctionContext(TopDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterTopDefFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitTopDefFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopDefFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopDefContext topDef() {
		TopDefContext _localctx = new TopDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_topDef);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case ID:
				_localctx = new TopDefFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				type_();
				State = 34;
				Match(ID);
				State = 35;
				Match(T__0);
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2199024238592L) != 0) {
					{
					State = 36;
					arg();
					}
				}

				State = 39;
				Match(T__1);
				State = 40;
				block();
				}
				break;
			case T__2:
				_localctx = new TopDefClassContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				Match(T__2);
				State = 43;
				Match(ID);
				State = 44;
				Match(T__3);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2199024238592L) != 0) {
					{
					{
					State = 45;
					classDecl();
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 51;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LatteParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LatteParser.ID, i);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 4, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			type_();
			State = 55;
			Match(ID);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 56;
				Match(T__5);
				State = 57;
				type_();
				State = 58;
				Match(ID);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__3);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 12094749497490L) != 0) {
				{
				{
				State = 66;
				stmt();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitAss(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAss(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		public DecrContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterDecr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitDecr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RetContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RetContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyContext : StmtContext {
		public EmptyContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public CondContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondElseContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public CondElseContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterCondElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitCondElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VRetContext : StmtContext {
		public VRetContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterVRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitVRet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVRet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		public IncrContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterIncr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitIncr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public DeclContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SExpContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SExpContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterSExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitSExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(T__6);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				block();
				}
				break;
			case 3:
				_localctx = new DeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				type_();
				State = 77;
				item();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 78;
					Match(T__5);
					State = 79;
					item();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85;
				Match(T__6);
				}
				break;
			case 4:
				_localctx = new AssContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				lhs();
				State = 88;
				Match(T__7);
				State = 89;
				expr(0);
				State = 90;
				Match(T__6);
				}
				break;
			case 5:
				_localctx = new IncrContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				lhs();
				State = 93;
				Match(T__8);
				State = 94;
				Match(T__6);
				}
				break;
			case 6:
				_localctx = new DecrContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 96;
				lhs();
				State = 97;
				Match(T__9);
				State = 98;
				Match(T__6);
				}
				break;
			case 7:
				_localctx = new RetContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				Match(T__10);
				State = 101;
				expr(0);
				State = 102;
				Match(T__6);
				}
				break;
			case 8:
				_localctx = new VRetContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(T__10);
				State = 105;
				Match(T__6);
				}
				break;
			case 9:
				_localctx = new CondContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 106;
				Match(T__11);
				State = 107;
				Match(T__0);
				State = 108;
				expr(0);
				State = 109;
				Match(T__1);
				State = 110;
				stmt();
				}
				break;
			case 10:
				_localctx = new CondElseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 112;
				Match(T__11);
				State = 113;
				Match(T__0);
				State = 114;
				expr(0);
				State = 115;
				Match(T__1);
				State = 116;
				stmt();
				State = 117;
				Match(T__12);
				State = 118;
				stmt();
				}
				break;
			case 11:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 120;
				Match(T__13);
				State = 121;
				Match(T__0);
				State = 122;
				expr(0);
				State = 123;
				Match(T__1);
				State = 124;
				stmt();
				}
				break;
			case 12:
				_localctx = new SExpContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 126;
				expr(0);
				State = 127;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LhsContext : ParserRuleContext {
		public LhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lhs; } }
	 
		public LhsContext() { }
		public virtual void CopyFrom(LhsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldAccessLHSContext : LhsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public FieldAccessLHSContext(LhsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterFieldAccessLHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitFieldAccessLHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccessLHS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdLhsContext : LhsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public IdLhsContext(LhsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterIdLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitIdLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdLhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LhsContext lhs() {
		LhsContext _localctx = new LhsContext(Context, State);
		EnterRule(_localctx, 10, RULE_lhs);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new IdLhsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new FieldAccessLHSContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(ID);
				State = 133;
				Match(T__14);
				State = 134;
				fieldAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			type_();
			State = 138;
			item();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 139;
				Match(T__5);
				State = 140;
				item();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
	 
		public Type_Context() { }
		public virtual void CopyFrom(Type_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrContext : Type_Context {
		public StrContext(Type_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : Type_Context {
		public BoolContext(Type_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidContext : Type_Context {
		public VoidContext(Type_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassInstanceContext : Type_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ClassInstanceContext(Type_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterClassInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitClassInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstance(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : Type_Context {
		public IntContext(Type_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 14, RULE_type_);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(T__15);
				}
				break;
			case T__16:
				_localctx = new StrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(T__16);
				}
				break;
			case T__17:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				Match(T__17);
				}
				break;
			case T__18:
				_localctx = new VoidContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 151;
				Match(T__18);
				}
				break;
			case ID:
				_localctx = new ClassInstanceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
	 
		public ItemContext() { }
		public virtual void CopyFrom(ItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleDeclContext : ItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public SimpleDeclContext(ItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterSimpleDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitSimpleDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssDeclContext : ItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssDeclContext(ItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterAssDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitAssDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 16, RULE_item);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new SimpleDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new AssDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(ID);
				State = 157;
				Match(T__7);
				State = 158;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EIdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public EIdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFunCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EFunCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEFunCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEFunCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFunCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ERelOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOpContext relOp() {
			return GetRuleContext<RelOpContext>(0);
		}
		public ERelOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterERelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitERelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitERelOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ETrueContext : ExprContext {
		public ETrueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterETrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitETrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitETrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EIntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LatteParser.INT, 0); }
		public EIntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EUnOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EUnOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEUnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEUnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEUnOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LatteParser.STR, 0); }
		public EStrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFieldAccessRHSContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public EFieldAccessRHSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEFieldAccessRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEFieldAccessRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFieldAccessRHS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMulOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulOpContext mulOp() {
			return GetRuleContext<MulOpContext>(0);
		}
		public EMulOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMulOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EParenContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public EParenContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFalseContext : ExprContext {
		public EFalseContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENewContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ENewContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterENew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitENew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAddOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public EAddOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterEAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitEAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENullContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		public ENullContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterENull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitENull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new EUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 162;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__20) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 163;
				expr(16);
				}
				break;
			case 2:
				{
				_localctx = new EIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new EIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165;
				Match(INT);
				}
				break;
			case 4:
				{
				_localctx = new ETrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166;
				Match(T__23);
				}
				break;
			case 5:
				{
				_localctx = new EFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167;
				Match(T__24);
				}
				break;
			case 6:
				{
				_localctx = new EFunCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168;
				Match(ID);
				State = 169;
				Match(T__0);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 12094748491778L) != 0) {
					{
					State = 170;
					expr(0);
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 171;
						Match(T__5);
						State = 172;
						expr(0);
						}
						}
						State = 177;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 180;
				Match(T__1);
				}
				break;
			case 7:
				{
				_localctx = new EStrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				Match(STR);
				}
				break;
			case 8:
				{
				_localctx = new EParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(T__0);
				State = 183;
				expr(0);
				State = 184;
				Match(T__1);
				}
				break;
			case 9:
				{
				_localctx = new ENewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				Match(T__25);
				State = 187;
				Match(ID);
				}
				break;
			case 10:
				{
				_localctx = new ENullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				Match(T__0);
				State = 189;
				Match(ID);
				State = 190;
				Match(T__26);
				}
				break;
			case 11:
				{
				_localctx = new EFieldAccessRHSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				Match(ID);
				State = 192;
				Match(T__14);
				State = 193;
				fieldAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new EMulOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 196;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 197;
						mulOp();
						State = 198;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new EAddOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 200;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 201;
						addOp();
						State = 202;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new ERelOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 204;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 205;
						relOp();
						State = 206;
						expr(14);
						}
						break;
					case 4:
						{
						_localctx = new EAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 208;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 209;
						Match(T__21);
						State = 210;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new EOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 211;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 212;
						Match(T__22);
						State = 213;
						expr(11);
						}
						break;
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatteParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(ID);
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 220;
				Match(T__14);
				State = 221;
				fieldAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulOpContext : ParserRuleContext {
		public MulOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulOpContext mulOp() {
		MulOpContext _localctx = new MulOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_mulOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOpContext : ParserRuleContext {
		public RelOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.EnterRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatteListener typedListener = listener as ILatteListener;
			if (typedListener != null) typedListener.ExitRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatteVisitor<TResult> typedVisitor = visitor as ILatteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOpContext relOp() {
		RelOpContext _localctx = new RelOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_relOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 270582939648L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,43,231,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,4,0,30,
		8,0,11,0,12,0,31,1,1,1,1,1,1,1,1,3,1,38,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,5,1,47,8,1,10,1,12,1,50,9,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,2,5,
		2,61,8,2,10,2,12,2,64,9,2,1,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,4,5,4,81,8,4,10,4,12,4,84,9,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,130,8,4,1,5,1,5,1,5,1,5,3,5,136,8,5,1,6,1,6,1,6,
		1,6,5,6,142,8,6,10,6,12,6,145,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,154,
		8,7,1,8,1,8,1,8,1,8,3,8,160,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,5,9,174,8,9,10,9,12,9,177,9,9,3,9,179,8,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,195,8,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,215,8,9,10,9,12,
		9,218,9,9,1,10,1,10,1,10,3,10,223,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
		13,0,1,18,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,4,1,0,20,21,2,0,20,
		20,28,28,1,0,29,31,1,0,32,37,259,0,29,1,0,0,0,2,52,1,0,0,0,4,54,1,0,0,
		0,6,65,1,0,0,0,8,129,1,0,0,0,10,135,1,0,0,0,12,137,1,0,0,0,14,153,1,0,
		0,0,16,159,1,0,0,0,18,194,1,0,0,0,20,219,1,0,0,0,22,224,1,0,0,0,24,226,
		1,0,0,0,26,228,1,0,0,0,28,30,3,2,1,0,29,28,1,0,0,0,30,31,1,0,0,0,31,29,
		1,0,0,0,31,32,1,0,0,0,32,1,1,0,0,0,33,34,3,14,7,0,34,35,5,41,0,0,35,37,
		5,1,0,0,36,38,3,4,2,0,37,36,1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,40,
		5,2,0,0,40,41,3,6,3,0,41,53,1,0,0,0,42,43,5,3,0,0,43,44,5,41,0,0,44,48,
		5,4,0,0,45,47,3,12,6,0,46,45,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,
		1,0,0,0,49,51,1,0,0,0,50,48,1,0,0,0,51,53,5,5,0,0,52,33,1,0,0,0,52,42,
		1,0,0,0,53,3,1,0,0,0,54,55,3,14,7,0,55,62,5,41,0,0,56,57,5,6,0,0,57,58,
		3,14,7,0,58,59,5,41,0,0,59,61,1,0,0,0,60,56,1,0,0,0,61,64,1,0,0,0,62,60,
		1,0,0,0,62,63,1,0,0,0,63,5,1,0,0,0,64,62,1,0,0,0,65,69,5,4,0,0,66,68,3,
		8,4,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,
		0,0,0,71,69,1,0,0,0,72,73,5,5,0,0,73,7,1,0,0,0,74,130,5,7,0,0,75,130,3,
		6,3,0,76,77,3,14,7,0,77,82,3,16,8,0,78,79,5,6,0,0,79,81,3,16,8,0,80,78,
		1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,
		1,0,0,0,85,86,5,7,0,0,86,130,1,0,0,0,87,88,3,10,5,0,88,89,5,8,0,0,89,90,
		3,18,9,0,90,91,5,7,0,0,91,130,1,0,0,0,92,93,3,10,5,0,93,94,5,9,0,0,94,
		95,5,7,0,0,95,130,1,0,0,0,96,97,3,10,5,0,97,98,5,10,0,0,98,99,5,7,0,0,
		99,130,1,0,0,0,100,101,5,11,0,0,101,102,3,18,9,0,102,103,5,7,0,0,103,130,
		1,0,0,0,104,105,5,11,0,0,105,130,5,7,0,0,106,107,5,12,0,0,107,108,5,1,
		0,0,108,109,3,18,9,0,109,110,5,2,0,0,110,111,3,8,4,0,111,130,1,0,0,0,112,
		113,5,12,0,0,113,114,5,1,0,0,114,115,3,18,9,0,115,116,5,2,0,0,116,117,
		3,8,4,0,117,118,5,13,0,0,118,119,3,8,4,0,119,130,1,0,0,0,120,121,5,14,
		0,0,121,122,5,1,0,0,122,123,3,18,9,0,123,124,5,2,0,0,124,125,3,8,4,0,125,
		130,1,0,0,0,126,127,3,18,9,0,127,128,5,7,0,0,128,130,1,0,0,0,129,74,1,
		0,0,0,129,75,1,0,0,0,129,76,1,0,0,0,129,87,1,0,0,0,129,92,1,0,0,0,129,
		96,1,0,0,0,129,100,1,0,0,0,129,104,1,0,0,0,129,106,1,0,0,0,129,112,1,0,
		0,0,129,120,1,0,0,0,129,126,1,0,0,0,130,9,1,0,0,0,131,136,5,41,0,0,132,
		133,5,41,0,0,133,134,5,15,0,0,134,136,3,20,10,0,135,131,1,0,0,0,135,132,
		1,0,0,0,136,11,1,0,0,0,137,138,3,14,7,0,138,143,3,16,8,0,139,140,5,6,0,
		0,140,142,3,16,8,0,141,139,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,
		144,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,7,0,0,147,13,1,0,
		0,0,148,154,5,16,0,0,149,154,5,17,0,0,150,154,5,18,0,0,151,154,5,19,0,
		0,152,154,5,41,0,0,153,148,1,0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,
		151,1,0,0,0,153,152,1,0,0,0,154,15,1,0,0,0,155,160,5,41,0,0,156,157,5,
		41,0,0,157,158,5,8,0,0,158,160,3,18,9,0,159,155,1,0,0,0,159,156,1,0,0,
		0,160,17,1,0,0,0,161,162,6,9,-1,0,162,163,7,0,0,0,163,195,3,18,9,16,164,
		195,5,41,0,0,165,195,5,40,0,0,166,195,5,24,0,0,167,195,5,25,0,0,168,169,
		5,41,0,0,169,178,5,1,0,0,170,175,3,18,9,0,171,172,5,6,0,0,172,174,3,18,
		9,0,173,171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
		179,1,0,0,0,177,175,1,0,0,0,178,170,1,0,0,0,178,179,1,0,0,0,179,180,1,
		0,0,0,180,195,5,2,0,0,181,195,5,43,0,0,182,183,5,1,0,0,183,184,3,18,9,
		0,184,185,5,2,0,0,185,195,1,0,0,0,186,187,5,26,0,0,187,195,5,41,0,0,188,
		189,5,1,0,0,189,190,5,41,0,0,190,195,5,27,0,0,191,192,5,41,0,0,192,193,
		5,15,0,0,193,195,3,20,10,0,194,161,1,0,0,0,194,164,1,0,0,0,194,165,1,0,
		0,0,194,166,1,0,0,0,194,167,1,0,0,0,194,168,1,0,0,0,194,181,1,0,0,0,194,
		182,1,0,0,0,194,186,1,0,0,0,194,188,1,0,0,0,194,191,1,0,0,0,195,216,1,
		0,0,0,196,197,10,15,0,0,197,198,3,24,12,0,198,199,3,18,9,16,199,215,1,
		0,0,0,200,201,10,14,0,0,201,202,3,22,11,0,202,203,3,18,9,15,203,215,1,
		0,0,0,204,205,10,13,0,0,205,206,3,26,13,0,206,207,3,18,9,14,207,215,1,
		0,0,0,208,209,10,12,0,0,209,210,5,22,0,0,210,215,3,18,9,12,211,212,10,
		11,0,0,212,213,5,23,0,0,213,215,3,18,9,11,214,196,1,0,0,0,214,200,1,0,
		0,0,214,204,1,0,0,0,214,208,1,0,0,0,214,211,1,0,0,0,215,218,1,0,0,0,216,
		214,1,0,0,0,216,217,1,0,0,0,217,19,1,0,0,0,218,216,1,0,0,0,219,222,5,41,
		0,0,220,221,5,15,0,0,221,223,3,20,10,0,222,220,1,0,0,0,222,223,1,0,0,0,
		223,21,1,0,0,0,224,225,7,1,0,0,225,23,1,0,0,0,226,227,7,2,0,0,227,25,1,
		0,0,0,228,229,7,3,0,0,229,27,1,0,0,0,18,31,37,48,52,62,69,82,129,135,143,
		153,159,175,178,194,214,216,222
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
